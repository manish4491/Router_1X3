class src_sequence extends uvm_sequence #(source_xtn);
`uvm_object_utils(src_sequence)
 function new(string name="src_sequence");
       super.new(name);
 endfunction
endclass

 class small_pkt extends src_sequence;
   //addr={$urandom}%3;
  bit [1:0]addr;
     `uvm_object_utils(small_pkt)
     function new(string name="small_pkt");
          super.new(name);
     endfunction
   task body();
       repeat(1)
             begin
                 req=source_xtn::type_id::create("req");              
              if(!uvm_config_db #(bit[1:0])::get(null,get_full_name(),"bit",addr))
	               `uvm_fatal("bit_addr","could not get addr have u set it ?")
                   start_item(req);
                   assert(req.randomize() with{header[7:2] inside {[0:16]};header[1:0]==addr;});
                   finish_item(req); 
             end
   endtask 
 endclass


 class medium_pkt extends src_sequence;
   bit [1:0]addr;
     `uvm_object_utils(medium_pkt)
     function new(string name="medium_pkt");
          super.new(name);
     endfunction
   task body();
       repeat(1)
             begin
                 req=source_xtn::type_id::create("req");
                if(!uvm_config_db #(bit[1:0])::get(null,get_full_name(),"bit",addr))
                   `uvm_fatal("bit_addr","could not get addr have u set it ?")
                  start_item(req);
                   assert(req.randomize() with{header[7:2] inside {[17:40]};header[1:0]==addr;});
                   finish_item(req); 
             end
   endtask 
 endclass
 class big_pkt extends src_sequence;
   bit [1:0]addr;
     `uvm_object_utils(big_pkt)
     function new(string name="big_pkt");
          super.new(name);
     endfunction
   task body();
       repeat(1)
             begin
                 req=source_xtn::type_id::create("req");
                  if(!uvm_config_db #(bit[1:0])::get(null,get_full_name(),"bit",addr))
                       `uvm_fatal("bit_addr","could not get addr have u set it ?")
                   start_item(req);
                   assert(req.randomize() with{header[7:2] inside {[40:63]};header[1:0]==addr;});
                   finish_item(req); 
             end
   endtask 
 endclass 