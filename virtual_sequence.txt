class virtual_sequence extends uvm_sequence #(uvm_sequence_item);
`uvm_object_utils(virtual_sequence)
  virtual_sequencer vseqrh;
  s_sequencer s_seqrh[];
  dsequencer d_seqrh[];
  env_config m_cfg;

  small_pkt spkt_h;
  medium_pkt mpkt_h;
   big_pkt bpkt_h;
 
  //sequence1 dseq_h;
  //sequence2 dseq2;
  dest_sequence dseq_h;
 function new(string name="virtual_sequence");
       super.new(name);
 endfunction
 task body();
  if(!uvm_config_db #(env_config)::get(null,get_full_name(),"env_config",m_cfg))
   `uvm_fatal("CONFIG","cannot get() m_cfg from uvm_config_db")
    s_seqrh=new[m_cfg.no_of_src_agents];
    d_seqrh=new[m_cfg.no_of_dest_agents];
    assert(!$cast(vseqrh,m_sequencer))
    else
       begin
      // $display("compatability not happening");     
           `uvm_error(get_full_name(),"virtual sequencer pointer cast failed");
       end
 foreach(s_seqrh[i])
    s_seqrh[i]=vseqrh.src_seqrh[i];
 foreach(d_seqrh[i])
    d_seqrh[i]=vseqrh.dest_seqrh[i];
 endtask
endclass

 class vseq_small_pkt extends virtual_sequence;
   //addr={$urandom}%3;
     `uvm_object_utils(vseq_small_pkt)
  	bit [1:0]addr;

     function new(string name="vseq_small_pkt");
          super.new(name);
     endfunction
   task body();
	super.body();
       repeat(1)
             begin
                 if(!uvm_config_db #(bit[1:0])::get(null,get_full_name(),"bit",addr))                 
                `uvm_fatal("bit_addr","could not get addr have u set it ?")
                     assert($cast(vseqrh,m_sequencer))
	                spkt_h=small_pkt::type_id::create("spkt_h");
	               dseq_h=dest_sequence::type_id::create("dseq_h");

              	fork 
  	             begin
		          spkt_h.start(s_seqrh[0]);
                          
	             end
	             begin
		               if(addr==2'b00)dseq_h.start(d_seqrh[0]);
		          else if(addr==2'b01)dseq_h.start(d_seqrh[1]);
		          else if(addr==2'b10)dseq_h.start(d_seqrh[2]);	
	              end
	          join	
	                 // $display("-------------v_seq------------------");

              end
   endtask 
 endclass


 class vseq_medium_pkt extends virtual_sequence;
   bit [1:0]addr;
     `uvm_object_utils(vseq_medium_pkt)
     function new(string name="vseq_medium_pkt");
          super.new(name);
     endfunction
   task body();
     super.body();
       repeat(1)
             begin
                
                if(!uvm_config_db #(bit[1:0])::get(null,get_full_name(),"bit",addr))
                   `uvm_fatal("bit_addr","could not get addr have u set it ?")
              	       assert($cast(vseqrh,m_sequencer))
	                mpkt_h=medium_pkt::type_id::create("mpkt_h");
	               // $display("-------------assert------------------");
	                dseq_h=dest_sequence::type_id::create("dseq_h");

              	fork 
  	             begin
		          mpkt_h.start(s_seqrh[0]);
	             end
	             begin
		               if(addr==2'b00)dseq_h.start(d_seqrh[0]);
		          else if(addr==2'b01)dseq_h.start(d_seqrh[1]);
		          else if(addr==2'b10)dseq_h.start(d_seqrh[2]);	
	              end
	         join	
	                //  $display("-------------v_seq------------------");
                
                  
             end
   endtask 
 endclass
 class vseq_big_pkt extends virtual_sequence;
   bit [1:0]addr;
     `uvm_object_utils(vseq_big_pkt)
     function new(string name="vseq_big_pkt");
          super.new(name);
     endfunction
   task body();
    super.body();
       repeat(1)
             begin
                 if(!uvm_config_db #(bit[1:0])::get(null,get_full_name(),"bit",addr))
                   `uvm_fatal("bit_addr","could not get addr have u set it ?")
              	       assert($cast(vseqrh,m_sequencer))
	                bpkt_h=big_pkt::type_id::create("bpkt_h");
	                $display("-------------assert------------------");
	                dseq_h=dest_sequence::type_id::create("dseq_h");

              	fork 
  	             begin
		          bpkt_h.start(s_seqrh[0]);
	             end
	             begin
		               if(addr==2'b00)dseq_h.start(d_seqrh[0]);
		          else if(addr==2'b01)dseq_h.start(d_seqrh[1]);
		          else if(addr==2'b10)dseq_h.start(d_seqrh[2]);	
	              end
	         join	
	                 // $display("-------------v_seq------------------");
                

             end
   endtask 
 endclass  